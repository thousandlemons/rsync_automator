import os

from _config import Paths, ConfigKeys
from _rsync import RsyncTask

TEMP_CRONTAB_FILE = os.path.join(Paths.PROJECT_ROOT, 'crontab.temp')
CRONTAB_ENTRY_TEMPLATE_FILE = os.path.join(Paths.TEMPLATE_DIR, 'crontab_entry.template')


class CrontabGenerator(object):
    _generated_crontab_comment_mark: str = None
    _entry_template: str = None
    _new_entries: list[str] = None

    def __init__(self, config: dict):
        self._generated_crontab_comment_mark = config.get(ConfigKeys.GENERATED_CRONTAB_COMMENT_MARK,
                                                          None)
        with open(CRONTAB_ENTRY_TEMPLATE_FILE, 'r') as file:
            self._entry_template = file.read()
        self._new_entries = []

    def add_script(self, task: RsyncTask) -> None:
        if task.schedule is None:
            return
        if self._generated_crontab_comment_mark is None:
            raise ValueError(
                    'Task schedule is defined but `generated_crontab_comment_mark` is not defined.')
        entry = self._generate_crontab_entry(task)
        self._new_entries.append(entry)

    def write_to_file(self) -> None:
        result_lines = []
        with open(TEMP_CRONTAB_FILE, 'r') as file:
            temp_crontab_lines = file.readlines()

        # Remove existing crontab entries previously generated by this script
        i = 0
        while i < len(temp_crontab_lines):
            if self._generated_crontab_comment_mark in temp_crontab_lines[i]:
                i += 2
                continue
            result_lines.append(temp_crontab_lines[i])
            i += 1

        if len(self._new_entries) > 0:
            # Append newly generated crontab entries
            _ensure_double_new_line_before_eof(result_lines)
            result_lines.append('\n\n'.join(self._new_entries) + '\n')

        # Write to temp crontab file
        with open(TEMP_CRONTAB_FILE, 'w+') as file:
            file.writelines(result_lines)

    def _generate_crontab_entry(self, task):
        """ Example template variables:
            {
                'name': 'Example Project',
                'generated_mark': '[Backup my home folders]',
                'schedule': '0 0 * * *'
                'absolute_script_path': '/project/root/dir/output/rsync_example-project.sh'
            }
        """
        crontab_entry_kwargs = {
            _CrontabEntryTemplateKeys.NAME: task.name,
            _CrontabEntryTemplateKeys.GENERATED_MARK: self._generated_crontab_comment_mark,
            _CrontabEntryTemplateKeys.SCHEDULE: task.schedule,
            _CrontabEntryTemplateKeys.ABSOLUTE_SCRIPT_PATH: task.get_absolute_generated_script_path()
        }
        return self._entry_template.format(**crontab_entry_kwargs)


class _CrontabEntryTemplateKeys(object):
    NAME = 'name'
    GENERATED_MARK = 'generated_mark'
    SCHEDULE = 'schedule'
    ABSOLUTE_SCRIPT_PATH = 'absolute_script_path'


def _ensure_double_new_line_before_eof(lines) -> None:
    if len(lines) == 0:
        return
    if not lines[-1].endswith('\n'):
        lines[-1] += '\n'
    ending_newlines_count = 0
    for line in reversed(lines):
        if line == '\n':
            ending_newlines_count += 1
        else:
            break
    for _ in range(ending_newlines_count):
        lines.pop()
    if len(lines) > 0:
        lines[-1] += '\n'
